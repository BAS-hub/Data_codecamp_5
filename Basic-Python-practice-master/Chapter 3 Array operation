{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array('d', [1.1, 1.2, 1.3])\n",
      "1.1\n",
      "array('d', [1.1, 1.2, 1.3, 2.5])\n",
      "array('d', [1.1, 1.2, 1.3, 2.5, 5.2, 4.3])\n"
     ]
    }
   ],
   "source": [
    "## Array with out Import Numpy package (Built in function)\n",
    "import array as arr ## Array เก็บข้อมูลได้ชนิดเดียว\n",
    "x = arr.array('d',[1.1,1.2,1.3]) ## d --> รหัสการเก็บข้อมูลเเบบ float\n",
    "print(x)\n",
    "print(x[0])\n",
    "x.append(2.5) ##เพิ่มตัวเดียว\n",
    "print(x)\n",
    "x.extend([5.2,4.3]) ##เพิ่มหลายตัว\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.  2.  3.  5.  4.5]\n",
      "15.5\n",
      "15.5\n",
      "[ 2.  4.  6. 10.  9.]\n",
      "[ 1.    4.    9.   25.   20.25]\n",
      "3.1\n",
      "1.4966629547095764\n"
     ]
    }
   ],
   "source": [
    "## Array Import with Numpy package\n",
    "import numpy as np\n",
    "x = np.array ([1,2,3,5,4.5])\n",
    "z = np.array ([1,2,3,5,4.5])\n",
    "y = [1,2,3,5,4.5]\n",
    "print (x)\n",
    "print(np.sum(x))\n",
    "print(np.sum(y))\n",
    "print (x*2)\n",
    "print(x*z) ## ดำเนินการตามตำเเหน่ง index ได้ โดยที่ list ทำไม่ได้\n",
    "print(np.mean(x)); print(np.std(x));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[68.89763779527559, 72.83464566929133, 66.14173228346456, 69.68503937007874]\n"
     ]
    }
   ],
   "source": [
    "## Numpy array VS List\n",
    "## Normal list\n",
    "import numpy as np\n",
    "cent = [175,185,168,177]\n",
    "inch = [ ]\n",
    "for i in cent :\n",
    "    inch.append(i/2.54)\n",
    "print(inch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[68.89763779527559, 72.83464566929133, 66.14173228346456, 69.68503937007874]\n"
     ]
    }
   ],
   "source": [
    "## List comprehension\n",
    "inch2 = [i/2.54 for i in cent]\n",
    "print(inch2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[68.89763779527559, 72.83464566929133, 66.14173228346456, 69.68503937007874]\n"
     ]
    }
   ],
   "source": [
    "##ใช้ map กับ list\n",
    "inch3 = list(map(lambda x : x/2.54 ,cent))\n",
    "print(inch3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[68.8976378  72.83464567 66.14173228 69.68503937]\n"
     ]
    }
   ],
   "source": [
    "##ใช้ numpy arrray \n",
    "inch4 = np.array(cent)/2.54 ## ดำเนินการเเต่ละข้อมูลใน array โดยตรง\n",
    "print(inch4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.002993345260620117\n",
      "0.42023491859436035\n"
     ]
    }
   ],
   "source": [
    "##ทดสอบความเร็ว numpy array vs list\n",
    "import numpy as np\n",
    "import time\n",
    "temp = np.arange(1000000) ## สร้างเลข 0 - n-1\n",
    "start = time.time()\n",
    "temp**2\n",
    "stop = time.time()\n",
    "delay =  stop - start\n",
    "print(delay)\n",
    "start = time.time()\n",
    "temp2 = [i**2 for i in range(1000000)]\n",
    "stop = time.time()\n",
    "delay2 =  stop - start\n",
    "print(delay2)\n",
    "#### numpy array เร็วกว่ามากก"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 3 5 7]\n",
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "## Vector array (1D)\n",
    "import numpy as np\n",
    "list1 = [1,3,5,7]\n",
    "arr1 = np.array(list1)\n",
    "print(arr1)\n",
    "## Matrix array (2D)\n",
    "list2 = [[1,2,3],[4,5,6],[7,8,9]]\n",
    "arr2 = np.array(list2)\n",
    "print(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "[1 2 3 4 5 6 7 8 9]\n",
      "[1 3 5 7 9]\n"
     ]
    }
   ],
   "source": [
    "## เเนะนำ function ใน numpy (np.arange)\n",
    "import numpy as np\n",
    "a = np.arange(10)\n",
    "print(a)\n",
    "a = np.arange(1,10)\n",
    "print(a)\n",
    "a = np.arange(1,10,2)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 0. 0. 0.]\n",
      "[[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "## np.zeros\n",
    "import numpy as np\n",
    "print(np.zeros(5))\n",
    "print(np.zeros((3,3))) ## ต้องมีเครื่องหมายวงเล็บกั้นภายใน (Tupple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1. 1.]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "## np.ones\n",
    "import numpy as np\n",
    "print(np.ones(5))\n",
    "print(np.ones((3,3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.  , 0.25, 0.5 , 0.75, 1.  ])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## np.linspace\n",
    "import numpy as np\n",
    "np.linspace(0,1,5) ## กำหนดสมาชิกภายในระยะที่กำหนด b-a/n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0.],\n",
       "       [0., 1., 0.],\n",
       "       [0., 0., 1.]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##np.eye (Identity matrix)\n",
    "import numpy as np\n",
    "np.eye(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n",
      "[5 6 6 5 5 8 9 8 8 9]\n",
      "[[5 7 5]\n",
      " [6 7 7]\n",
      " [7 6 5]\n",
      " [9 9 5]\n",
      " [7 9 6]\n",
      " [6 9 6]\n",
      " [9 6 5]\n",
      " [6 8 9]\n",
      " [6 5 7]\n",
      " [8 7 6]]\n"
     ]
    }
   ],
   "source": [
    "## np.random.randint() random เลขจำนวนเต็ม\n",
    "import numpy as np\n",
    "print(np.random.randint(5,10)) ## random เลข ตั้งเเต่ 5 ถึง 9\n",
    "print(np.random.randint(5,10,10)) ## random เลข ตั้งเเต่ 5 ถึง 9 จำนวน 10 ตัว\n",
    "print(np.random.randint(5,10,(10,3))) ## random เลข ตั้งเเต่ 5 ถึง 9 จำนวน 10 เเถว 3 หลัก (Tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.51353196 0.51074858]\n",
      "[[0.00939853 0.00415985 0.91793835]\n",
      " [0.6584836  0.82107152 0.9589631 ]]\n"
     ]
    }
   ],
   "source": [
    "## np.random.rand() random เลขจำนวจริง ตั้งเเต่ 0-1\n",
    "import numpy as np\n",
    "print(np.random.rand(2)) ## random ลขจำนวจริง ตั้งเเต่ 0-1 จำนวน 2 ตัว\n",
    "print(np.random.rand(2,3)) ## random ลขจำนวจริง ตั้งเเต่ 0-1 จำนวน 2 เเถว 3 หลัก\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9 7 7 9 5 5 8 8 6]\n",
      "[[9 7 7]\n",
      " [9 5 5]\n",
      " [8 8 6]]\n"
     ]
    }
   ],
   "source": [
    "## reshape()\n",
    "import numpy as np\n",
    "x = np.random.randint(5,10,9)  ## random เลข ตั้งเเต่ 5 ถึง 9 จำนวน 9 ตัว\n",
    "print (x)\n",
    "print(x.reshape(3,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[6 5 8]\n",
      " [9 6 7]\n",
      " [7 6 6]]\n",
      "-----------------------------\n",
      "[[6 9 7]\n",
      " [5 6 6]\n",
      " [8 7 6]]\n"
     ]
    }
   ],
   "source": [
    "## T(Transpose)\n",
    "import numpy as np\n",
    "x =np.random.randint(5,10,(3,3)) ## random เลข ตั้งเเต่ 5 ถึง 9 จำนวน 10 เเถว 3 หลัก (Tuple)\n",
    "print(x)\n",
    "print(\"-----------------------------\")\n",
    "print(x.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17 16 16  1  3  8  3 11]\n",
      "17\n",
      "1\n",
      "_____________________\n",
      "0\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "##Operation and Inder for python array\n",
    "## x.max() หรือ np.max(x) เเละ np.argmax/min()\n",
    "import numpy as np\n",
    "x =np.random.randint(1,20,8)\n",
    "print(x)\n",
    "print(np.max(x))\n",
    "print(np.min(x))\n",
    "print(\"_____________________\")\n",
    "print(np.argmax(x)) ## หาตำเเหน่ง ค่ามากที่สุด\n",
    "print(np.argmin(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 2  1 12  5 17  3  1 16]\n",
      "[ 1  1  2  3  5 12 16 17]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([17, 16, 12,  5,  3,  2,  1,  1])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## x.soft() ค่าน้อยไปมาก --> x[::-1] ค่ามากไปน้อย\n",
    "import numpy as np\n",
    "x =np.random.randint(1,20,8)\n",
    "print(x)\n",
    "x.sort()\n",
    "print(x)\n",
    "x[::-1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 4)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## shape() ดูมิติของ array\n",
    "import numpy as np\n",
    "x =np.random.randint(1,20,(4,4))\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10  3  5 18  8  3  2  4  6  6]\n",
      "3\n",
      "[3 2 4 6 6]\n"
     ]
    }
   ],
   "source": [
    "## การเข้าถึงสมาชิกของ 1D vector\n",
    "import numpy as np\n",
    "x =np.random.randint(1,20,10)\n",
    "print(x)\n",
    "print(x[5])\n",
    "print(x[5:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 8  9  8  7 11]\n",
      " [19 15 14  9  4]\n",
      " [16 19  6 16 10]\n",
      " [18 17  1 14  3]\n",
      " [ 1 18 10 13 18]]\n",
      "6\n",
      "6\n",
      "[ 4 10]\n",
      "[[ 8  7]\n",
      " [14  9]\n",
      " [ 6 16]]\n"
     ]
    }
   ],
   "source": [
    "## การเข้าถึงสมาชิกของ 2D matrix\n",
    "import numpy as np\n",
    "x =np.random.randint(1,20,(5,5))\n",
    "print(x)\n",
    "print(x[2][2])\n",
    "print(x[2,2]) \n",
    "print(x[1:3,4]) ## เเถว 2 ถึง 3 หลักที่ 4 (นับเเบบ index)\n",
    "print(x[:3,2:4]) ## เเถวเเรก ถึงเเถว 3 หลักที่ 2 ถึง 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False, False,  True,  True, False],\n",
       "       [ True,  True,  True, False,  True],\n",
       "       [False, False, False, False, False],\n",
       "       [ True, False,  True,  True,  True],\n",
       "       [False,  True, False, False, False]])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Conditional selection array 2D or 1D\n",
    "import numpy as np\n",
    "x =np.random.randint(1,20,(5,5))\n",
    "x > 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([14, 16, 18, 18, 11, 11, 14, 14, 15, 16, 19])"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[x > 10] ## ใส่เป็น list ทำให้คัดตัวที่เป็น true ออกมา"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
